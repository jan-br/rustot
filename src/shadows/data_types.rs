use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub enum State<T> {
    #[serde(rename = "desired")]
    Desired(T),
    #[serde(rename = "reported")]
    Reported(T),
}

/// A request state document has the following format:
/// - **state** — Updates affect only the fields specified. Typically, you'll use
///   either the desired or the reported property, but not both in the same
///   request.
/// - **desired** — The state properties and values requested to be updated in the
///   device.
/// - **reported** — The state properties and values reported by the device.
/// - **clientToken** — If used, you can match the request and corresponding
///   response by the client token.
/// - **version** — If used, the Device Shadow service processes the update only if
///   the specified version matches the latest version it has.
#[derive(Debug, Serialize, Deserialize)]
pub struct Request<'a, T> {
    pub state: State<T>,
    #[serde(rename = "clientToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub client_token: Option<&'a str>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Desired<T> {
    pub desired: T,
}

/// Response accepted state documents have the following format:
/// - **state**
///     - reported — Present only if a thing reported any data in the reported
///       section and contains only fields that were in the request state
///       document.
///     - desired — Present only if a device reported any data in the desired
///       section and contains only fields that were in the request state
///       document.
///     - delta — Present only if the desired data differs from the shadow's
///       current reported data.
/// - **metadata** — Contains the timestamps for each attribute in the desired
///   and reported sections so that you can determine when the state was
///   updated.
/// - **timestamp** — The Epoch date and time the response was generated by AWS
///   IoT.
/// - **clientToken** — Present only if a client token was used when publishing
///   valid JSON to the /update topic.
/// - **version** — The current version of the document for the device's shadow
///   shared in AWS IoT. It is increased by one over the previous version of the
///   document.
#[derive(Debug, Serialize, Deserialize)]
pub struct AcceptedResponse<'a, T> {
    pub state: Desired<T>,
    pub timestamp: u64,
    #[serde(rename = "clientToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub client_token: Option<&'a str>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

/// Response accepted state documents have the following format:
/// - **previous** — After a successful update, contains the state of the object
///   before the update.
/// - **current** — After a successful update, contains the state of the object
///   after the update.
/// - **state**
///     - reported — Present only if a thing reported any data in the reported
///       section and contains only fields that were in the request state
///       document.
///     - desired — Present only if a device reported any data in the desired
///       section and contains only fields that were in the request state
///       document.
///     - delta — Present only if the desired data differs from the shadow's
///       current reported data.
/// - **metadata** — Contains the timestamps for each attribute in the desired
///   and reported sections so that you can determine when the state was
///   updated.
/// - **timestamp** — The Epoch date and time the response was generated by AWS
///   IoT.
/// - **clientToken** — Present only if a client token was used when publishing
///   valid JSON to the /update topic.
/// - **version** — The current version of the document for the device's shadow
///   shared in AWS IoT. It is increased by one over the previous version of the
///   document.
#[derive(Debug, Serialize, Deserialize)]
pub struct DeltaResponse<'a, T> {
    pub state: Desired<T>,
    pub timestamp: u64,
    #[serde(rename = "clientToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub client_token: Option<&'a str>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}

/// An error response document has the following format:
/// - **code** — An HTTP response code that indicates the type of error.
/// - **message** — A text message that provides additional information.
/// - **timestamp** — The date and time the response was generated by AWS IoT.
///   This property is not present in all error response documents.
/// - **clientToken** — Present only if a client token was used in the published
///   message.
#[derive(Debug, Deserialize)]
pub struct ErrorResponse<'a> {
    pub code: u16,
    pub message: &'a str,
    pub timestamp: Option<u64>,
    #[serde(rename = "clientToken")]
    pub client_token: Option<&'a str>,
}
